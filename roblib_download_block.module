<?php

/**
 * @file
 * Module file for roblib_download_block.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function roblib_download_block_block_info() {
  $blocks['roblib_download_block'] = array(
    // info: The name of the block.
    'info' => t('Roblib Download'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function roblib_download_block_block_configure($delta = '') {
  $form = array();
  if ($delta == 'roblib_download_block') {
    $form['roblib_download_block_datastreams_allowed'] = array(
      '#type' => 'textfield',
      '#title' => t('Datastreams to provide download links for.'),
      '#size' => 60,
      '#description' => t('A comma seperated list of datastreams to provide links for.'),
      '#default_value' => variable_get('roblib_download_block_datastreams_allowed', t('PDF, OBJ, JP2, OCR')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function roblib_download_block_block_save($delta = '', $edit = array()) {

  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'roblib_download_block') {

    // Have Drupal save the string to the database.
    variable_set('roblib_download_block_datastreams_allowed', $edit['roblib_download_block_datastreams_allowed']);
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function roblib_download_block_block_view($delta = '') {
  switch ($delta) {
    case 'roblib_download_block':
      $block['subject'] = t('Download Block');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = roblib_download_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * module-defined block content function.
 */
function roblib_download_block_contents($delta) {
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  $object = menu_get_object('islandora_object', 2);
  if(empty($object)) {
    // Not an islandora object page.
    return '';
  }
  $pid = $object->id;
  $models = $object->models;
  $selects = array();
  if(in_array('islandora:newspaperIssueCModel', $models)) {
    $pages = roblib_download_block_get_pages($object);
    $pages = array_keys($pages);
    foreach($pages as $pid) {
      $page_object = islandora_object_load($pid);
      $selects[] = roblib_download_block_create_select($page_object);
    }

  } // TODO: test without limit to newspaper issues
  //else {
    //$selects[] = roblib_download_block_create_select($object);
   //}
  // TODO: theming
  return implode($selects);
}

/**
 * Creates a select html element listing the datastreams available for download.
 *
 * @param $object
 *   Islandora object to get the list of datastreams from.
 *
 * @return string
 *   A themed select html element.
 *
 * @throws \Exception
 */
function roblib_download_block_create_select($object) {
  $options = array();
  $pid = $object->id;
  $datastreams = explode(',', variable_get('roblib_download_block_datastreams_allowed', t('PDF, OBJ, JP2, OCR')));
  foreach($datastreams as $datastream) {
    $datastream = trim($datastream);
    if (isset($object[$datastream]) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object[$datastream])) {
      $size = islandora_datastream_get_human_readable_size($object[$datastream]);
      $options[url("/islandora/object/$pid/datastream/$datastream/download", array('absolute' => TRUE))] = t('@datastream (@size)', array('@datastream' => $datastream, '@size' => $size));
    }
  }
  // no datastreams available for download
  if(empty($options)) {
    return '';
  }
  $download = array('#Download ' . $object->label => t('Download ' . $object->label));
  $options = $download + $options;
  $download_select = array(
    '#options' => $options,
    '#attributes' => array('class' => array('page-select'), 'onchange' => 'location=this.value'),
  );
  return theme('select', ['element' => $download_select]);
}

/**
 * Returns a list of page objects.
 *
 * @param $object
 *   Islandora object to get the list of associated pages from.
 *
 * @return mixed
 *   A list of pages
 */
function roblib_download_block_get_pages($object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $pages = islandora_paged_content_get_pages($object);
  return $pages;
}
